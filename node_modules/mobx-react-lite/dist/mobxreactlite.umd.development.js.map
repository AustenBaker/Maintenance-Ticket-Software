{"version":3,"file":"mobxreactlite.umd.development.js","sources":["../src/assertEnvironment.ts","../src/staticRendering.ts","../src/utils.ts","../src/observerBatching.ts","../src/printDebugValue.ts","../src/reactionCleanupTracking.ts","../src/useObserver.ts","../src/observer.ts","../src/ObserverComponent.ts","../src/useAsObservableSource.ts","../src/useLocalStore.ts"],"sourcesContent":["import { spy } from \"mobx\"\nimport { useState } from \"react\"\n\nif (!useState) {\n    throw new Error(\"mobx-react-lite requires React with Hooks support\")\n}\nif (!spy) {\n    throw new Error(\"mobx-react-lite requires mobx at least version 4 to be available\")\n}\n","let globalIsUsingStaticRendering = false\n\nexport function useStaticRendering(enable: boolean) {\n    globalIsUsingStaticRendering = enable\n}\n\nexport function isUsingStaticRendering(): boolean {\n    return globalIsUsingStaticRendering\n}\n","import { useCallback, useEffect, useState } from \"react\"\n\nconst EMPTY_ARRAY: any[] = []\n\nexport function useUnmount(fn: () => void) {\n    useEffect(() => fn, EMPTY_ARRAY)\n}\n\nexport function useForceUpdate() {\n    const [, setTick] = useState(0)\n\n    const update = useCallback(() => {\n        setTick(tick => tick + 1)\n    }, [])\n\n    return update\n}\n\nexport function isPlainObject(value: any): value is object {\n    if (!value || typeof value !== \"object\") {\n        return false\n    }\n    const proto = Object.getPrototypeOf(value)\n    return !proto || proto === Object.prototype\n}\n\nexport function getSymbol(name: string): symbol | string {\n    if (typeof Symbol === \"function\") {\n        return Symbol.for(name)\n    }\n    return `__$mobx-react ${name}__`\n}\n\ndeclare const window: any\ndeclare const self: any\n\nconst mockGlobal = {}\n\nexport function getGlobal() {\n    if (typeof window !== \"undefined\") {\n        return window\n    }\n    if (typeof global !== \"undefined\") {\n        return global\n    }\n    if (typeof self !== \"undefined\") {\n        return self\n    }\n    return mockGlobal\n}\n","import { configure } from \"mobx\"\n\nimport { getGlobal, getSymbol } from \"./utils\"\n\ninterface IBatchedUpdates {\n    batchedUpdates<A, B>(callback: (a: A, b: B) => any, a: A, b: B): void\n    batchedUpdates<A>(callback: (a: A) => any, a: A): void\n    batchedUpdates(callback: () => any): void\n}\n\nconst observerBatchingConfiguredSymbol = getSymbol(\"observerBatching\")\n\nexport const observerBatching = (reactionScheduler?: IBatchedUpdates) => {\n    if (typeof reactionScheduler === \"function\") {\n        configure({ reactionScheduler })\n    }\n    getGlobal()[observerBatchingConfiguredSymbol] = true\n}\n\nexport const observerBatchingOptOut = () => {\n    configure({ reactionScheduler: undefined })\n    getGlobal()[observerBatchingConfiguredSymbol] = true\n}\n\nexport const isObserverBatched = () => getGlobal()[observerBatchingConfiguredSymbol]\n","import { getDependencyTree, Reaction } from \"mobx\"\n\nexport function printDebugValue(v: Reaction) {\n    return getDependencyTree(v)\n}\n","import { Reaction } from \"mobx\"\n\nexport interface IReactionTracking {\n    /** The Reaction created during first render, which may be leaked */\n    reaction: Reaction\n    /**\n     * The time (in ticks) at which point we should dispose of the reaction\n     * if this component hasn't yet been fully mounted.\n     */\n    cleanAt: number\n\n    /**\n     * Whether the component has yet completed mounting (for us, whether\n     * its useEffect has run)\n     */\n    mounted?: boolean\n\n    /**\n     * Whether the observables that the component is tracking changed between\n     * the first render and the first useEffect.\n     */\n    changedBeforeMount?: boolean\n}\n\nexport function createTrackingData(reaction: Reaction) {\n    const trackingData: IReactionTracking = {\n        cleanAt: Date.now() + CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS,\n        reaction\n    }\n    return trackingData\n}\n\n/**\n * The minimum time before we'll clean up a Reaction created in a render\n * for a component that hasn't managed to run its effects. This needs to\n * be big enough to ensure that a component won't turn up and have its\n * effects run without being re-rendered.\n */\nexport const CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS = 10_000\n\n/**\n * The frequency with which we'll check for leaked reactions.\n */\nexport const CLEANUP_TIMER_LOOP_MILLIS = 10_000\n\n/**\n * Reactions created by components that have yet to be fully mounted.\n */\nconst uncommittedReactionRefs: Set<React.MutableRefObject<IReactionTracking | null>> = new Set()\n\n/**\n * Latest 'uncommitted reactions' cleanup timer handle.\n */\nlet reactionCleanupHandle: ReturnType<typeof setTimeout> | undefined\n\nfunction ensureCleanupTimerRunning() {\n    if (reactionCleanupHandle === undefined) {\n        reactionCleanupHandle = setTimeout(cleanUncommittedReactions, CLEANUP_TIMER_LOOP_MILLIS)\n    }\n}\n\nexport function scheduleCleanupOfReactionIfLeaked(\n    ref: React.MutableRefObject<IReactionTracking | null>\n) {\n    uncommittedReactionRefs.add(ref)\n\n    ensureCleanupTimerRunning()\n}\n\nexport function recordReactionAsCommitted(\n    reactionRef: React.MutableRefObject<IReactionTracking | null>\n) {\n    uncommittedReactionRefs.delete(reactionRef)\n}\n\n/**\n * Run by the cleanup timer to dispose any outstanding reactions\n */\nfunction cleanUncommittedReactions() {\n    reactionCleanupHandle = undefined\n\n    // Loop through all the candidate leaked reactions; those older\n    // than CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS get tidied.\n\n    const now = Date.now()\n    for (const ref of uncommittedReactionRefs) {\n        const tracking = ref.current\n        if (tracking) {\n            if (now >= tracking.cleanAt) {\n                // It's time to tidy up this leaked reaction.\n                tracking.reaction.dispose()\n                ref.current = null\n                uncommittedReactionRefs.delete(ref)\n            }\n        }\n    }\n\n    if (uncommittedReactionRefs.size > 0) {\n        // We've just finished a round of cleanups but there are still\n        // some leak candidates outstanding.\n        ensureCleanupTimerRunning()\n    }\n}\n\n/* istanbul ignore next */\n/**\n * Only to be used by test functions; do not export outside of mobx-react-lite\n */\nexport function forceCleanupTimerToRunNowForTests() {\n    // This allows us to control the execution of the cleanup timer\n    // to force it to run at awkward times in unit tests.\n    if (reactionCleanupHandle) {\n        clearTimeout(reactionCleanupHandle)\n        cleanUncommittedReactions()\n    }\n}\n\n/* istanbul ignore next */\nexport function resetCleanupScheduleForTests() {\n    if (reactionCleanupHandle) {\n        clearTimeout(reactionCleanupHandle)\n        reactionCleanupHandle = undefined\n    }\n    uncommittedReactionRefs.clear()\n}\n","import { Reaction } from \"mobx\"\nimport React from \"react\"\n\nimport { isObserverBatched } from \"./observerBatching\"\nimport { printDebugValue } from \"./printDebugValue\"\nimport {\n    createTrackingData,\n    IReactionTracking,\n    recordReactionAsCommitted,\n    scheduleCleanupOfReactionIfLeaked\n} from \"./reactionCleanupTracking\"\nimport { isUsingStaticRendering } from \"./staticRendering\"\nimport { useForceUpdate } from \"./utils\"\n\nexport type ForceUpdateHook = () => () => void\n\nexport interface IUseObserverOptions {\n    useForceUpdate?: ForceUpdateHook\n}\n\nconst EMPTY_OBJECT = {}\n\nfunction observerComponentNameFor(baseComponentName: string) {\n    return `observer${baseComponentName}`\n}\n\nlet warnedAboutBatching = false\n\nexport function useObserver<T>(\n    fn: () => T,\n    baseComponentName: string = \"observed\",\n    options: IUseObserverOptions = EMPTY_OBJECT\n): T {\n    if (isUsingStaticRendering()) {\n        return fn()\n    }\n\n    if (__DEV__ && !warnedAboutBatching && !isObserverBatched()) {\n        console.warn(\n            `[MobX] You haven't configured observer batching which might result in unexpected behavior in some cases. See more at https://github.com/mobxjs/mobx-react-lite/#observer-batching`\n        )\n        warnedAboutBatching = true\n    }\n\n    const wantedForceUpdateHook = options.useForceUpdate || useForceUpdate\n    const forceUpdate = wantedForceUpdateHook()\n\n    // StrictMode/ConcurrentMode/Suspense may mean that our component is\n    // rendered and abandoned multiple times, so we need to track leaked\n    // Reactions.\n    const reactionTrackingRef = React.useRef<IReactionTracking | null>(null)\n\n    if (!reactionTrackingRef.current) {\n        // First render for this component (or first time since a previous\n        // reaction from an abandoned render was disposed).\n\n        const newReaction = new Reaction(observerComponentNameFor(baseComponentName), () => {\n            // Observable has changed, meaning we want to re-render\n            // BUT if we're a component that hasn't yet got to the useEffect()\n            // stage, we might be a component that _started_ to render, but\n            // got dropped, and we don't want to make state changes then.\n            // (It triggers warnings in StrictMode, for a start.)\n            if (trackingData.mounted) {\n                // We have reached useEffect(), so we're mounted, and can trigger an update\n                forceUpdate()\n            } else {\n                // We haven't yet reached useEffect(), so we'll need to trigger a re-render\n                // when (and if) useEffect() arrives.  The easiest way to do that is just to\n                // drop our current reaction and allow useEffect() to recreate it.\n                newReaction.dispose()\n                reactionTrackingRef.current = null\n            }\n        })\n\n        const trackingData = createTrackingData(newReaction)\n        reactionTrackingRef.current = trackingData\n        scheduleCleanupOfReactionIfLeaked(reactionTrackingRef)\n    }\n\n    const { reaction } = reactionTrackingRef.current!\n    React.useDebugValue(reaction, printDebugValue)\n\n    React.useEffect(() => {\n        // Called on first mount only\n        recordReactionAsCommitted(reactionTrackingRef)\n\n        if (reactionTrackingRef.current) {\n            // Great. We've already got our reaction from our render;\n            // all we need to do is to record that it's now mounted,\n            // to allow future observable changes to trigger re-renders\n            reactionTrackingRef.current.mounted = true\n        } else {\n            // The reaction we set up in our render has been disposed.\n            // This is either due to bad timings of renderings, e.g. our\n            // component was paused for a _very_ long time, and our\n            // reaction got cleaned up, or we got a observable change\n            // between render and useEffect\n\n            // Re-create the reaction\n            reactionTrackingRef.current = {\n                reaction: new Reaction(observerComponentNameFor(baseComponentName), () => {\n                    // We've definitely already been mounted at this point\n                    forceUpdate()\n                }),\n                cleanAt: Infinity\n            }\n            forceUpdate()\n        }\n\n        return () => {\n            reactionTrackingRef.current!.reaction.dispose()\n            reactionTrackingRef.current = null\n        }\n    }, [])\n\n    // render the original component, but have the\n    // reaction track the observables, so that rendering\n    // can be invalidated (see above) once a dependency changes\n    let rendering!: T\n    let exception\n    reaction.track(() => {\n        try {\n            rendering = fn()\n        } catch (e) {\n            exception = e\n        }\n    })\n    if (exception) {\n        throw exception // re-throw any exceptions catched during rendering\n    }\n    return rendering\n}\n","import { forwardRef, memo } from \"react\"\n\nimport { isUsingStaticRendering } from \"./staticRendering\"\nimport { useObserver } from \"./useObserver\"\n\nexport interface IObserverOptions {\n    readonly forwardRef?: boolean\n}\n\nexport function observer<P extends object, TRef = {}>(\n    baseComponent: React.RefForwardingComponent<TRef, P>,\n    options: IObserverOptions & { forwardRef: true }\n): React.MemoExoticComponent<\n    React.ForwardRefExoticComponent<React.PropsWithoutRef<P> & React.RefAttributes<TRef>>\n>\n\nexport function observer<P extends object>(\n    baseComponent: React.FunctionComponent<P>,\n    options?: IObserverOptions\n): React.FunctionComponent<P>\n\nexport function observer<\n    C extends React.FunctionComponent<any> | React.RefForwardingComponent<any>,\n    Options extends IObserverOptions\n>(\n    baseComponent: C,\n    options?: Options\n): Options extends { forwardRef: true }\n    ? C extends React.RefForwardingComponent<infer TRef, infer P>\n        ? C &\n              React.MemoExoticComponent<\n                  React.ForwardRefExoticComponent<\n                      React.PropsWithoutRef<P> & React.RefAttributes<TRef>\n                  >\n              >\n        : never /* forwardRef set for a non forwarding component */\n    : C & { displayName: string }\n\n// n.b. base case is not used for actual typings or exported in the typing files\nexport function observer<P extends object, TRef = {}>(\n    baseComponent: React.RefForwardingComponent<TRef, P>,\n    options?: IObserverOptions\n) {\n    // The working of observer is explained step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307\n    if (isUsingStaticRendering()) {\n        return baseComponent\n    }\n\n    const realOptions = {\n        forwardRef: false,\n        ...options\n    }\n\n    const baseComponentName = baseComponent.displayName || baseComponent.name\n\n    const wrappedComponent = (props: P, ref: React.Ref<TRef>) => {\n        return useObserver(() => baseComponent(props, ref), baseComponentName)\n    }\n    wrappedComponent.displayName = baseComponentName\n\n    // memo; we are not intested in deep updates\n    // in props; we assume that if deep objects are changed,\n    // this is in observables, which would have been tracked anyway\n    let memoComponent\n    if (realOptions.forwardRef) {\n        // we have to use forwardRef here because:\n        // 1. it cannot go before memo, only after it\n        // 2. forwardRef converts the function into an actual component, so we can't let the baseComponent do it\n        //    since it wouldn't be a callable function anymore\n        memoComponent = memo(forwardRef(wrappedComponent))\n    } else {\n        memoComponent = memo(wrappedComponent)\n    }\n\n    copyStaticProperties(baseComponent, memoComponent)\n    memoComponent.displayName = baseComponentName\n\n    return memoComponent\n}\n\n// based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js\nconst hoistBlackList: any = {\n    $$typeof: true,\n    render: true,\n    compare: true,\n    type: true\n}\n\nfunction copyStaticProperties(base: any, target: any) {\n    Object.keys(base).forEach(key => {\n        if (!hoistBlackList[key]) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key)!)\n        }\n    })\n}\n","import { useObserver } from \"./useObserver\"\n\ninterface IObserverProps {\n    children?(): React.ReactElement<any>\n    render?(): React.ReactElement<any>\n}\n\nfunction ObserverComponent({ children, render }: IObserverProps) {\n    const component = children || render\n    if (typeof component !== \"function\") {\n        return null\n    }\n    return useObserver(component)\n}\nObserverComponent.propTypes = {\n    children: ObserverPropsCheck,\n    render: ObserverPropsCheck\n}\nObserverComponent.displayName = \"Observer\"\n\nexport { ObserverComponent as Observer }\n\nfunction ObserverPropsCheck(\n    props: { [k: string]: any },\n    key: string,\n    componentName: string,\n    location: any,\n    propFullName: string\n) {\n    const extraKey = key === \"children\" ? \"render\" : \"children\"\n    const hasProp = typeof props[key] === \"function\"\n    const hasExtraProp = typeof props[extraKey] === \"function\"\n    if (hasProp && hasExtraProp) {\n        return new Error(\n            \"MobX Observer: Do not use children and render in the same time in`\" + componentName\n        )\n    }\n\n    if (hasProp || hasExtraProp) {\n        return null\n    }\n    return new Error(\n        \"Invalid prop `\" +\n            propFullName +\n            \"` of type `\" +\n            typeof props[key] +\n            \"` supplied to\" +\n            \" `\" +\n            componentName +\n            \"`, expected `function`.\"\n    )\n}\n","import { observable, runInAction } from \"mobx\"\nimport React from \"react\"\n\nimport { isPlainObject } from \"./utils\"\n\nexport function useAsObservableSourceInternal<TSource>(\n    current: TSource,\n    usedByLocalStore: boolean\n): TSource {\n    const culprit = usedByLocalStore ? \"useLocalStore\" : \"useAsObservableSource\"\n    if (usedByLocalStore && current === undefined) {\n        return undefined as any\n    }\n    if (process.env.NODE_ENV !== \"production\" && !isPlainObject(current)) {\n        throw new Error(\n            `${culprit} expects a plain object as ${usedByLocalStore ? \"second\" : \"first\"} argument`\n        )\n    }\n\n    const [res] = React.useState(() => observable(current, {}, { deep: false }))\n    if (\n        process.env.NODE_ENV !== \"production\" &&\n        Object.keys(res).length !== Object.keys(current).length\n    ) {\n        throw new Error(`the shape of objects passed to ${culprit} should be stable`)\n    }\n    runInAction(() => {\n        Object.assign(res, current)\n    })\n    return res\n}\n\nexport function useAsObservableSource<TSource>(current: TSource): TSource {\n    return useAsObservableSourceInternal(current, false)\n}\n","import { observable, runInAction, transaction } from \"mobx\"\nimport React from \"react\"\n\nimport { useAsObservableSourceInternal } from \"./useAsObservableSource\"\nimport { isPlainObject } from \"./utils\"\n\nexport function useLocalStore<TStore extends Record<string, any>, TSource extends object = any>(\n    initializer: (source: TSource) => TStore,\n    current?: TSource\n): TStore {\n    const source = useAsObservableSourceInternal<TSource | undefined>(current, true)\n\n    return React.useState(() => {\n        const local = observable(initializer(source as TSource))\n        if (isPlainObject(local)) {\n            runInAction(() => {\n                Object.keys(local).forEach(key => {\n                    const value = local[key]\n                    if (typeof value === \"function\") {\n                        // @ts-ignore No idea why ts2536 is popping out here\n                        local[key] = wrapInTransaction(value, local)\n                    }\n                })\n            })\n        }\n        return local\n    })[0]\n}\n\n// tslint:disable-next-line: ban-types\nfunction wrapInTransaction(fn: Function, context: object) {\n    return (...args: unknown[]) => {\n        return transaction(() => fn.apply(context, args))\n    }\n}\n"],"names":["useState","Error","spy","globalIsUsingStaticRendering","useStaticRendering","enable","isUsingStaticRendering","useForceUpdate","setTick","update","useCallback","tick","isPlainObject","value","proto","Object","getPrototypeOf","prototype","getSymbol","name","Symbol","for","mockGlobal","getGlobal","window","global","self","observerBatchingConfiguredSymbol","observerBatching","reactionScheduler","configure","observerBatchingOptOut","undefined","isObserverBatched","printDebugValue","v","getDependencyTree","createTrackingData","reaction","trackingData","cleanAt","Date","now","CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS","CLEANUP_TIMER_LOOP_MILLIS","uncommittedReactionRefs","Set","reactionCleanupHandle","ensureCleanupTimerRunning","setTimeout","cleanUncommittedReactions","scheduleCleanupOfReactionIfLeaked","ref","add","recordReactionAsCommitted","reactionRef","delete","tracking","current","dispose","size","EMPTY_OBJECT","observerComponentNameFor","baseComponentName","warnedAboutBatching","useObserver","fn","options","console","warn","wantedForceUpdateHook","forceUpdate","reactionTrackingRef","React","useRef","newReaction","Reaction","mounted","useDebugValue","useEffect","Infinity","rendering","exception","track","e","observer","baseComponent","realOptions","forwardRef","displayName","wrappedComponent","props","memoComponent","memo","copyStaticProperties","hoistBlackList","$$typeof","render","compare","type","base","target","keys","forEach","key","defineProperty","getOwnPropertyDescriptor","ObserverComponent","children","component","propTypes","ObserverPropsCheck","componentName","location","propFullName","extraKey","hasProp","hasExtraProp","useAsObservableSourceInternal","usedByLocalStore","culprit","process","observable","deep","res","length","runInAction","assign","useAsObservableSource","useLocalStore","initializer","source","local","wrapInTransaction","context","args","transaction","apply"],"mappings":"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"}