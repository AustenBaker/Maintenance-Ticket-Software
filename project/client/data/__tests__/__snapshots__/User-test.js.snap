// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`User renders the first test user correctly 1`] = `
<View
  style={
    Object {
      "alignContent": "center",
      "alignSelf": "center",
      "flex": 1,
      "flexDirection": "column",
      "margin": 20,
    }
  }
>
  <View
    style={
      Object {
        "alignContent": "flex-start",
        "alignItems": "flex-start",
        "alignSelf": "stretch",
        "borderRadius": 10,
        "direction": "ltr",
        "elevation": 6,
        "flexDirection": "column",
        "justifyContent": "flex-start",
        "overflow": "hidden",
        "padding": 20,
        "shadowColor": "#555555",
        "shadowOffset": Object {
          "height": 10,
          "width": 10,
        },
        "shadowOpacity": 10,
        "shadowRadius": 10,
      }
    }
  >
    <Text
      style={
        Object {
          "color": "#FFF",
          "fontSize": 17,
          "padding": 2,
        }
      }
      testID="user-name"
    >
      Name:
       
      <Text
        style={
          Object {
            "color": "#FFF",
            "fontSize": 17,
            "padding": 2,
          }
        }
        testID="user-first"
      >
        Red
      </Text>
       
      <Text
        style={
          Object {
            "color": "#FFF",
            "fontSize": 17,
            "padding": 2,
          }
        }
        testID="user-last"
      >
        Rover
      </Text>
    </Text>
    <Text
      style={
        Object {
          "color": "#FFF",
          "fontSize": 17,
          "padding": 2,
        }
      }
      testID="user-email"
    >
      Email: 
      ima@yahoo.com
    </Text>
    <Text
      style={
        Object {
          "color": "#FFF",
          "fontSize": 17,
          "padding": 2,
        }
      }
      testID="user-phone"
    >
      Phone: 
      123-456-7890

      

    </Text>
    <Text
      style={
        Object {
          "color": "#FFF",
          "fontSize": 17,
          "padding": 2,
        }
      }
      testID="user-entry"
    >
      Entry Permission:
        Notify before entry.
      


    </Text>
    <View
      style={
        Object {
          "alignContent": "flex-start",
          "alignItems": "stretch",
          "alignSelf": "stretch",
          "flex": 1,
          "flexDirection": "column",
        }
      }
      testID="user-note"
    >
      <Text
        style={
          Object {
            "color": "#FFF",
            "fontSize": 17,
            "padding": 2,
          }
        }
      >
        Note:
      </Text>
      <Text
        style={
          Object {
            "color": "#FFF",
            "fontSize": 17,
            "padding": 2,
          }
        }
      >
        The dog that doesn't bark will bite.
      </Text>
    </View>
  </View>
  <View
    style={
      Object {
        "alignContent": "flex-start",
        "alignItems": "center",
        "alignSelf": "stretch",
        "direction": "ltr",
        "flex": 1,
        "flexDirection": "row",
        "justifyContent": "space-evenly",
        "marginHorizontal": 10,
        "paddingHorizontal": 10,
        "paddingVertical": 2,
      }
    }
  >
    <View
      style={
        Object {
          "alignContent": "stretch",
          "alignSelf": "stretch",
          "borderRadius": 5,
          "elevation": 8,
          "flex": 1,
          "flexDirection": "column",
          "justifyContent": "flex-start",
          "margin": 0,
          "overflow": "hidden",
          "shadowColor": "#555555",
          "shadowOffset": Object {
            "height": 10,
            "width": 10,
          },
          "shadowOpacity": 10,
          "shadowRadius": 10,
        }
      }
    >
      <View
        accessibilityLabel="Edit Profile Button"
        accessibilityRole="button"
        accessibilityState={Object {}}
        accessible={true}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
        testID="edit-button"
      >
        <View
          style={
            Array [
              Object {},
            ]
          }
        >
          <Text
            style={
              Array [
                Object {
                  "color": "#007AFF",
                  "fontSize": 18,
                  "margin": 8,
                  "textAlign": "center",
                },
              ]
            }
          >
            Edit Profile
          </Text>
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`User renders the user profile editing screen 1`] = `
<View
  style={
    Object {
      "alignContent": "center",
      "alignSelf": "center",
      "flex": 1,
      "flexDirection": "column",
      "margin": 20,
    }
  }
>
  <View
    style={
      Object {
        "alignContent": "flex-start",
        "alignItems": "flex-start",
        "alignSelf": "stretch",
        "borderRadius": 10,
        "direction": "ltr",
        "elevation": 6,
        "flexDirection": "column",
        "justifyContent": "flex-start",
        "overflow": "hidden",
        "padding": 20,
        "shadowColor": "#555555",
        "shadowOffset": Object {
          "height": 10,
          "width": 10,
        },
        "shadowOpacity": 10,
        "shadowRadius": 10,
      }
    }
  >
    <Text
      style={
        Object {
          "color": "#FFF",
          "fontSize": 17,
          "padding": 2,
        }
      }
    >
      Name:
       
      <TextInput
        allowFontScaling={true}
        defaultValue={null}
        errormessage="This field is required."
        keyboardType="default"
        label="First Name"
        maxLength={32}
        onChangeText={[Function]}
        placeholder="First Name"
        rejectResponderTermination={true}
        selectTextOnFocus={true}
        style={
          Object {
            "alignContent": "stretch",
            "alignSelf": "stretch",
            "borderBottomColor": "darkgrey",
            "borderColor": "lightgrey",
            "borderRightColor": "darkgrey",
            "borderWidth": 2,
            "flex": 0.3,
            "flexDirection": "column",
            "padding": 2,
          }
        }
        textContentType="name"
        underlineColorAndroid="transparent"
      />
        
      <TextInput
        allowFontScaling={true}
        defaultValue={null}
        errormessage="This field is required."
        keyboardType="default"
        label="Last Name"
        maxLength={32}
        onChangeText={[Function]}
        placeholder="Last Name"
        rejectResponderTermination={true}
        selectTextOnFocus={true}
        style={
          Object {
            "alignContent": "stretch",
            "alignSelf": "stretch",
            "borderBottomColor": "darkgrey",
            "borderColor": "lightgrey",
            "borderRightColor": "darkgrey",
            "borderWidth": 2,
            "flex": 0.3,
            "flexDirection": "column",
            "padding": 2,
          }
        }
        textContentType="familyName"
        underlineColorAndroid="transparent"
      />
    </Text>
    <Text
      style={
        Object {
          "color": "#FFF",
          "fontSize": 17,
          "padding": 2,
        }
      }
    >
      Email:
        
      <TextInput
        allowFontScaling={true}
        defaultValue={null}
        errormessage="This field is required.  Please enter valid email address."
        keyboardType="email-address"
        label="Email"
        maxLength={32}
        onChangeText={[Function]}
        placeholder="your.email@server.com"
        rejectResponderTermination={true}
        selectTextOnFocus={true}
        style={
          Object {
            "alignContent": "stretch",
            "alignSelf": "stretch",
            "borderBottomColor": "darkgrey",
            "borderColor": "lightgrey",
            "borderRightColor": "darkgrey",
            "borderWidth": 2,
            "flexDirection": "column",
            "padding": 2,
          }
        }
        textContentType="emailAddress"
        underlineColorAndroid="transparent"
      />
    </Text>
    <Text
      style={
        Object {
          "color": "#FFF",
          "fontSize": 17,
          "padding": 2,
        }
      }
    >
      Phone:
        
      <TextInput
        allowFontScaling={true}
        defaultValue={null}
        errormessage="Please enter valid phone number: ###-###-####"
        keyboardType="phone-pad"
        label="Phone Number"
        maxLength={12}
        onChangeText={[Function]}
        placeholder="###-###-####"
        rejectResponderTermination={true}
        selectTextOnFocus={true}
        style={
          Object {
            "alignContent": "stretch",
            "alignSelf": "stretch",
            "borderBottomColor": "darkgrey",
            "borderColor": "lightgrey",
            "borderRightColor": "darkgrey",
            "borderWidth": 2,
            "flexDirection": "column",
            "padding": 2,
          }
        }
        textContentType="telephoneNumber"
        underlineColorAndroid="transparent"
      />
    </Text>
    <Text
      style={
        Object {
          "color": "#FFF",
          "fontSize": 17,
          "padding": 2,
        }
      }
    >
      

      Preferred Contact:
        
      <View>
        <RCTPicker
          items={
            Array [
              Object {
                "label": "Email",
                "textColor": undefined,
                "value": "email",
              },
              Object {
                "label": "Text",
                "textColor": undefined,
                "value": "text",
              },
            ]
          }
          onChange={[Function]}
          selectedIndex={0}
          style={
            Array [
              Object {
                "height": 216,
              },
              undefined,
            ]
          }
        />
      </View>
    </Text>
    <Text
      style={
        Object {
          "color": "#FFF",
          "fontSize": 17,
          "padding": 2,
        }
      }
    >
      

      Entry Permission:
        
      <View>
        <RCTPicker
          items={
            Array [
              Object {
                "label": "Allow accompanied entry",
                "textColor": undefined,
                "value": "accompanied",
              },
              Object {
                "label": "Notify before entry",
                "textColor": undefined,
                "value": "notify",
              },
              Object {
                "label": "Allow entry",
                "textColor": undefined,
                "value": "any",
              },
            ]
          }
          onChange={[Function]}
          selectedIndex={0}
          style={
            Array [
              Object {
                "height": 216,
              },
              undefined,
            ]
          }
        />
      </View>
      


    </Text>
    <View
      style={
        Object {
          "alignContent": "flex-start",
          "alignItems": "stretch",
          "alignSelf": "stretch",
          "flex": 1,
          "flexDirection": "column",
        }
      }
    >
      <Text
        style={
          Object {
            "color": "#FFF",
            "fontSize": 17,
            "padding": 2,
          }
        }
      >
        Note:
      </Text>
      <TextInput
        allowFontScaling={true}
        defaultValue={null}
        keyboardType="default"
        label="Note"
        maxLength={255}
        multiline={true}
        numberOfLines={4}
        onChangeText={[Function]}
        placeholder="Enter note here."
        rejectResponderTermination={true}
        selectTextOnFocus={true}
        style={
          Object {
            "alignContent": "stretch",
            "alignSelf": "stretch",
            "borderBottomColor": "darkgrey",
            "borderColor": "lightgrey",
            "borderRightColor": "darkgrey",
            "borderWidth": 2,
            "flex": 1,
            "flexDirection": "column",
            "fontSize": 17,
            "padding": 2,
            "width": "100%",
          }
        }
        testID="note-edit"
        underlineColorAndroid="transparent"
      />
    </View>
  </View>
  <View
    style={
      Object {
        "alignContent": "flex-start",
        "alignItems": "center",
        "alignSelf": "stretch",
        "direction": "ltr",
        "flex": 1,
        "flexDirection": "row",
        "justifyContent": "space-evenly",
        "marginHorizontal": 10,
        "paddingHorizontal": 10,
        "paddingVertical": 2,
      }
    }
  >
    <View
      style={
        Object {
          "alignContent": "stretch",
          "alignSelf": "stretch",
          "borderRadius": 5,
          "elevation": 8,
          "flex": 0.3,
          "flexDirection": "column",
          "justifyContent": "flex-start",
          "margin": 0,
          "overflow": "hidden",
          "shadowColor": "#555555",
          "shadowOffset": Object {
            "height": 10,
            "width": 10,
          },
          "shadowOpacity": 10,
          "shadowRadius": 10,
        }
      }
    >
      <View
        accessibilityLabel="Update Profile Button"
        accessibilityRole="button"
        accessibilityState={Object {}}
        accessible={true}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
        testID="update-button"
      >
        <View
          style={
            Array [
              Object {},
            ]
          }
        >
          <Text
            style={
              Array [
                Object {
                  "color": "#007AFF",
                  "fontSize": 18,
                  "margin": 8,
                  "textAlign": "center",
                },
              ]
            }
          >
            Update
          </Text>
        </View>
      </View>
    </View>
    <View
      style={
        Object {
          "alignContent": "stretch",
          "alignSelf": "stretch",
          "borderRadius": 5,
          "elevation": 8,
          "flex": 0.3,
          "flexDirection": "column",
          "justifyContent": "flex-start",
          "margin": 0,
          "overflow": "hidden",
          "shadowColor": "#555555",
          "shadowOffset": Object {
            "height": 10,
            "width": 10,
          },
          "shadowOpacity": 10,
          "shadowRadius": 10,
        }
      }
    >
      <View
        accessibilityLabel="Reset Profile Button"
        accessibilityRole="button"
        accessibilityState={Object {}}
        accessible={true}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
        testID="reset-button"
      >
        <View
          style={
            Array [
              Object {},
            ]
          }
        >
          <Text
            style={
              Array [
                Object {
                  "color": "#007AFF",
                  "fontSize": 18,
                  "margin": 8,
                  "textAlign": "center",
                },
              ]
            }
          >
            Reset
          </Text>
        </View>
      </View>
    </View>
    <View
      style={
        Object {
          "alignContent": "stretch",
          "alignSelf": "stretch",
          "borderRadius": 5,
          "elevation": 8,
          "flex": 0.3,
          "flexDirection": "column",
          "justifyContent": "flex-start",
          "margin": 0,
          "overflow": "hidden",
          "shadowColor": "#555555",
          "shadowOffset": Object {
            "height": 10,
            "width": 10,
          },
          "shadowOpacity": 10,
          "shadowRadius": 10,
        }
      }
    >
      <View
        accessibilityLabel="Cancel Button"
        accessibilityRole="button"
        accessibilityState={Object {}}
        accessible={true}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
        testID="cancel-button"
      >
        <View
          style={
            Array [
              Object {},
            ]
          }
        >
          <Text
            style={
              Array [
                Object {
                  "color": "#007AFF",
                  "fontSize": 18,
                  "margin": 8,
                  "textAlign": "center",
                },
              ]
            }
          >
            Cancel
          </Text>
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`User renders the user screen 1`] = `
<View
  style={
    Object {
      "alignContent": "center",
      "alignSelf": "center",
      "flex": 1,
      "flexDirection": "column",
      "margin": 20,
    }
  }
>
  <View
    style={
      Object {
        "alignContent": "flex-start",
        "alignItems": "flex-start",
        "alignSelf": "stretch",
        "borderRadius": 10,
        "direction": "ltr",
        "elevation": 6,
        "flexDirection": "column",
        "justifyContent": "flex-start",
        "overflow": "hidden",
        "padding": 20,
        "shadowColor": "#555555",
        "shadowOffset": Object {
          "height": 10,
          "width": 10,
        },
        "shadowOpacity": 10,
        "shadowRadius": 10,
      }
    }
  >
    <Text
      style={
        Object {
          "color": "#FFF",
          "fontSize": 17,
          "padding": 2,
        }
      }
      testID="user-name"
    >
      Name:
       
      <Text
        style={
          Object {
            "color": "#FFF",
            "fontSize": 17,
            "padding": 2,
          }
        }
        testID="user-first"
      />
       
      <Text
        style={
          Object {
            "color": "#FFF",
            "fontSize": 17,
            "padding": 2,
          }
        }
        testID="user-last"
      />
    </Text>
    <Text
      style={
        Object {
          "color": "#FFF",
          "fontSize": 17,
          "padding": 2,
        }
      }
      testID="user-email"
    >
      Email: 
    </Text>
    <Text
      style={
        Object {
          "color": "#FFF",
          "fontSize": 17,
          "padding": 2,
        }
      }
      testID="user-phone"
    >
      Phone: 
      null

      

    </Text>
    <Text
      style={
        Object {
          "color": "#FFF",
          "fontSize": 17,
          "padding": 2,
        }
      }
      testID="user-entry"
    >
      Entry Permission:
        Accompanied entry only.
      


    </Text>
    <View
      style={
        Object {
          "alignContent": "flex-start",
          "alignItems": "stretch",
          "alignSelf": "stretch",
          "flex": 1,
          "flexDirection": "column",
        }
      }
      testID="user-note"
    >
      <Text
        style={
          Object {
            "color": "#FFF",
            "fontSize": 17,
            "padding": 2,
          }
        }
      >
        Note:
      </Text>
      <Text
        style={
          Object {
            "color": "#FFF",
            "fontSize": 17,
            "padding": 2,
          }
        }
      />
    </View>
  </View>
  <View
    style={
      Object {
        "alignContent": "flex-start",
        "alignItems": "center",
        "alignSelf": "stretch",
        "direction": "ltr",
        "flex": 1,
        "flexDirection": "row",
        "justifyContent": "space-evenly",
        "marginHorizontal": 10,
        "paddingHorizontal": 10,
        "paddingVertical": 2,
      }
    }
  >
    <View
      style={
        Object {
          "alignContent": "stretch",
          "alignSelf": "stretch",
          "borderRadius": 5,
          "elevation": 8,
          "flex": 1,
          "flexDirection": "column",
          "justifyContent": "flex-start",
          "margin": 0,
          "overflow": "hidden",
          "shadowColor": "#555555",
          "shadowOffset": Object {
            "height": 10,
            "width": 10,
          },
          "shadowOpacity": 10,
          "shadowRadius": 10,
        }
      }
    >
      <View
        accessibilityLabel="Edit Profile Button"
        accessibilityRole="button"
        accessibilityState={Object {}}
        accessible={true}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
        testID="edit-button"
      >
        <View
          style={
            Array [
              Object {},
            ]
          }
        >
          <Text
            style={
              Array [
                Object {
                  "color": "#007AFF",
                  "fontSize": 18,
                  "margin": 8,
                  "textAlign": "center",
                },
              ]
            }
          >
            Edit Profile
          </Text>
        </View>
      </View>
    </View>
  </View>
</View>
`;
